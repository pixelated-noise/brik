* Speculative usage patterns

This could be the ~module.edn~ file present in every module:

#+BEGIN_SRC clojure
  {:name   :brik/user-management
   :facets {:routes  {:type    :reitit/routes
                      :content brik.user-management/routes}
            :schemas {:type    :malli/schemas
                      :content [var1 var2 var3]}
            :db      {:type    ...}}}
#+END_SRC

But how to you make it so that it works for very simple CRUD modules that have
stock routes and DB facets?

The above could be a config and an internal data representation on which brik
core functions will be able to act in order to produce the final module. So the
entry point for a module is not a EDN config file, but a constructor function
that returns something like the EDN above:

#+BEGIN_SRC clojure
  (ns my-module.module
    (:require [brik.infer.routes :as routes]
              [brik.infer.db :as db]
              [my-module.model :as model]))

  (defn build [args]
    (-> {:name   :brik/user-management
         :facets {:schemas {:type    :malli/schemas
                            :content [::model/user
                                      ::model/company
                                      ::model/address]}}}
        (db/merge-facet-malli-crud :db :schemas)
        (routes/merge-facet-db-routes :routes :db)))
#+END_SRC

Let's have a look at what's going on in slow motion:

#+BEGIN_SRC clojure
  (-> {:name   :brik/user-management
       :facets {:schemas {:type    'malli/schemas
                          :content [::model/user
                                    ::model/company
                                    ::model/address]}}}
      (db/merge-facet-malli-crud :db :schemas)) ;; add a facet called :db based on :schemas
#+END_SRC

Produces something like:

#+BEGIN_SRC clojure
  {:name   :brik/user-management
   :facets {:schemas {:type    malli/schemas
                      :content [::model/user
                                ::model/company
                                ::model/address]}
            :db      {:type    :sql/crud
                      :content {::model/user    {:create       #function[...]
                                                 :get          #function[...]
                                                 :update       #function[...]
                                                 :delete       #function[...]
                                                 :multi-create #function[...]
                                                 :multi-get    #function[...]
                                                 :multi-update #function[...]
                                                 :multi-delete #function[...]}
                                ::model/company {...}
                                ::model/address {...}}}}}
#+END_SRC

Where all the functions accept a DB object and EDN data to perform the various
CRUD operations. Similarly, ~(routes/merge-facet-db-routes :routes :db)~ will
add another facet called ~:routes~, based on the contents on the ~:db~ facet to
expose these operations via HTTP.

** Escape hatch: Merging facets

Notice that the functions we've seen up to now that act on the module all have
the prefix ~merge-facet-~. This is because the facets that get inferred from
other existing facets of the module are not simply added to the facets submap
(which would effectively overwrite any existing facets with the same name), but
they are merged with any existing facets with the same name that are already
there.

This is an escape hatch that allows a module to mix both hand-written and
inferred code into a simple facet. This takes advantage of /mortar/ functions
that already contain ways to merge routes, or ~sql/crud~ facets etc.

Based on the above, the ~db/merge-facet-malli-crud~ function is the composition
of two operations:

- ~db/malli->crud-map~
- ~db/merge-facet~

The mortar code in ~db/merge-facet~ will ensure that the facets being merged do
not overwrite each other and throw an error if they do.

In light of this, we can rewrite the previous code in a simpler, but more
tedious, way:

#+BEGIN_SRC clojure
  (ns my-module.module
    (:require [brik.infer.routes :as routes]
              [brik.infer.db :as db]
              [brik.mortar :as m]
              [my-module.model :as model]))

  (defn build [args]
    (let [module {:name   :brik/user-management
                  :facets {:schemas {:type    :malli/schemas
                                     :content [::model/user
                                               ::model/company
                                               ::model/address]}}}]
      (as-> module $
        (update-in $ [:facets :db]
                   #(m/merge-facet % (db/malli->crud-map (get-in $ [:facets :schemas]))))
        (update-in $ [:facets :routes]
                   #(m/merge-facet % (db/malli->crud-map (get-in $ [:facets :db])))))))
#+END_SRC

Less convenient, but it helps you see what's going on. Of course, in this case
we know that the original module does not have any hand-coded ~:db~ nor
~:routes~ facets, so using ~m/merge-facet~ is unnecessary, but I tried to write
the equivalent code as before.

** Merging modules

The mortar code for merging modules into a single app uses the ~merge-facet~
function for each type of facet to merge all the modules together into a unified
app.

** Brik algebra

Some common mortar verbs:

- merge-facet: merge a facet into an existing modulke
- merge-modules: merge two modules with each other
- rename-facets: ~rename-keys~-like functionality for all the facets of a module
- inference: creating a facet based on a different facet (e.g. database CRUD
  functions inferred from a malli model, reitit routes inferred from database
  CRUD functions etc)

** Validation when merging

???

** Times

Different Brik "times":

- runtime
- test time
- validation time
- deployment time
- infra-setup time
- db-migration time
